import dbConnect from "@/lib/mongodb"
import Booking from "@/models/Booking"
import { z } from "zod"
import { sendMail } from "@/lib/mail"

export async function GET() {
  if (!process.env.MONGODB_URI) {
    return Response.json({ error: "Database not configured" }, { status: 503 })
  }
  try {
    await dbConnect()
    const bookings = await Booking.find().select(
      "_id firstName lastName email phone residence departureDate returnDate travelers budget comments createdAt"
    )
    return Response.json(bookings)
  } catch (error) {
    return Response.json({ error: "Failed to fetch bookings" }, { status: 500 })
  }
}

export async function POST(req: Request) {
  const body = await req.json().catch(() => ({}))
  const schema = z.object({
      firstName: z.string().min(1),
      lastName: z.string().min(1),
      email: z.string().email(),
      phone: z.string().min(3),
      residence: z.string().optional().default(""),
      departureDate: z.coerce.date().optional(),
      returnDate: z.coerce.date().optional(),
      travelers: z.coerce.number().int().min(1).default(1),
      budget: z.string().optional().default(""),
      comments: z.string().optional().default(""),
    })
  const parsed = schema.safeParse(body)
  if (!parsed.success) {
    return Response.json(
      { error: "Invalid input", details: parsed.error.flatten() },
      { status: 400 }
    )
  }

  // Try sending email first; do not fail request if it errors
  try {
    const recipients = (process.env.NOTIFY_EMAILS || "maseemmy2000@gmail.com,gihomart@250gmail.com").split(",").map(s => s.trim()).filter(Boolean)
    const d = parsed.data
    const fullName = `${d.firstName} ${d.lastName}`.trim()
    const html = `
      <h2>New Booking Request</h2>
      <p><strong>Name:</strong> ${fullName}</p>
      <p><strong>Email:</strong> ${d.email}</p>
      <p><strong>Phone:</strong> ${d.phone}</p>
      ${d.residence ? `<p><strong>Residence:</strong> ${d.residence}</p>` : ""}
      ${d.departureDate ? `<p><strong>Departure:</strong> ${new Date(d.departureDate).toLocaleDateString()}</p>` : ""}
      ${d.returnDate ? `<p><strong>Return:</strong> ${new Date(d.returnDate).toLocaleDateString()}</p>` : ""}
      <p><strong>Travelers:</strong> ${d.travelers}</p>
      ${d.budget ? `<p><strong>Budget:</strong> ${d.budget}</p>` : ""}
      ${d.comments ? `<p><strong>Comments:</strong> ${d.comments.replace(/\n/g, "<br/>")}</p>` : ""}
      <p style=\"color:#888;font-size:12px;\">This email was generated by the website.</p>
    `
    await sendMail({ to: recipients, subject: `Booking request from ${fullName}`, html })

    // Confirmation email to customer
    const confirmHtml = `
      <h2>Thanks for your booking request</h2>
      <p>Hi ${fullName},</p>
      <p>We received your booking request and will contact you shortly.</p>
      ${d.residence ? `<p><strong>Residence:</strong> ${d.residence}</p>` : ""}
      ${d.departureDate ? `<p><strong>Departure:</strong> ${new Date(d.departureDate).toLocaleDateString()}</p>` : ""}
      ${d.returnDate ? `<p><strong>Return:</strong> ${new Date(d.returnDate).toLocaleDateString()}</p>` : ""}
      <p><strong>Travelers:</strong> ${d.travelers}</p>
      ${d.comments ? `<p><strong>Comments:</strong> ${d.comments.replace(/\n/g, "<br/>")}</p>` : ""}
      <p style=\"color:#888;font-size:12px;\">This is a confirmation of your submission.</p>
    `
    await sendMail({ to: d.email, subject: "We received your booking request", html: confirmHtml })
  } catch (e) {
    // ignore email errors
  }

  // Try DB write; do not fail request if it errors
  try {
    await dbConnect()
    await Booking.create(parsed.data)
  } catch (e) {
    // ignore db errors
  }

  return Response.json({ success: true }, { status: 201 })
}


