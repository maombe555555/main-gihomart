import dbConnect from "@/lib/mongodb"
import ContactMessage from "@/models/ContactMessage"
import { z } from "zod"
import { sendMail } from "@/lib/mail"

export async function GET() {
  if (!process.env.MONGODB_URI) {
    return Response.json({ error: "Database not configured" }, { status: 503 })
  }
  try {
    await dbConnect()
    const messages = await ContactMessage.find().select(
      "_id firstName lastName email phone subject message createdAt"
    )
    return Response.json(messages)
  } catch (error) {
    return Response.json({ error: "Failed to fetch contact messages" }, { status: 500 })
  }
}

export async function POST(req: Request) {
  const body = await req.json().catch(() => ({}))
  const schema = z.object({
    firstName: z.string().min(1),
    lastName: z.string().min(1),
    email: z.string().email(),
    phone: z.string().optional().default(""),
    subject: z.string().min(1),
    message: z.string().min(1),
  })
  const parsed = schema.safeParse(body)
  if (!parsed.success) {
    return Response.json(
      { error: "Invalid input", details: parsed.error.flatten() },
      { status: 400 }
    )
  }

  // Attempt to send email; do not fail request if it errors
  try {
    const recipients = (process.env.NOTIFY_EMAILS || "maseemmy2000@gmail.com,gihomart@250gmail.com").split(",").map(s => s.trim()).filter(Boolean)
    const { firstName, lastName, email, phone, subject, message } = parsed.data
    const fullName = `${firstName} ${lastName}`.trim()
    const html = `
      <h2>New Contact Message</h2>
      <p><strong>Name:</strong> ${fullName}</p>
      <p><strong>Email:</strong> ${email}</p>
      ${phone ? `<p><strong>Phone:</strong> ${phone}</p>` : ""}
      <p><strong>Subject:</strong> ${subject}</p>
      <p><strong>Message:</strong></p>
      <p>${message.replace(/\n/g, "<br/>")}</p>
      <p style="color:#888;font-size:12px;">This email was generated by the website.</p>
    `
    await sendMail({ to: recipients, subject: `Contact: ${subject}`, html })

    // Send confirmation email to the submitter
    const confirmHtml = `
      <h2>Thanks for contacting GiHomarts</h2>
      <p>Hi ${fullName},</p>
      <p>We received your message and will get back to you as soon as possible.</p>
      <p><strong>Your subject:</strong> ${subject}</p>
      <p><strong>Your message:</strong></p>
      <p>${message.replace(/\n/g, "<br/>")}</p>
      <p style="color:#888;font-size:12px;">This is a confirmation of your submission.</p>
    `
    await sendMail({ to: email, subject: "We received your message", html: confirmHtml })
  } catch (e) {
    // ignore email errors
  }

  // Attempt to persist in DB; do not fail request if it errors
  try {
    await dbConnect()
    await ContactMessage.create(parsed.data)
  } catch (e) {
    // ignore db errors
  }

  return Response.json({ success: true }, { status: 201 })
}


